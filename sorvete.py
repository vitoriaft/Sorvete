# -*- coding: utf-8 -*-
"""sorvete.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GyB8ielAiC9cJGcpjjVMgt3TeicvEKl6
"""

# Importação de bibliotecas
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import mlflow
import mlflow.sklearn

# Gerando dados fictícios para o exemplo
np.random.seed(42)
dias = 30  # Número de dias
temperatura = np.random.randint(20, 35, dias)  # Temperatura aleatória entre 20 e 35°C
vendas = temperatura * 10 + np.random.randint(0, 20, dias)  # Vendas com base na temperatura e ruído aleatório

# Criando o DataFrame
df = pd.DataFrame({
    'Temperatura': temperatura,
    'Vendas': vendas
})

# Exibição do DataFrame
print(df.head())

# Divisão de dados para treino e teste
X = df[['Temperatura']]  # Variável independente
y = df['Vendas']  # Variável dependente

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inicializando o modelo de Regressão Linear
modelo = LinearRegression()

# Usando o MLflow para rastrear o modelo
mlflow.start_run()

# Treinando o modelo
modelo.fit(X_train, y_train)

# Realizando previsões
y_pred = modelo.predict(X_test)

# Calculando o erro médio quadrático
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

# Registrando o modelo com MLflow
mlflow.log_param('modelo', 'Regressão Linear')
mlflow.log_metric('mean_squared_error', mse)
mlflow.sklearn.log_model(modelo, 'modelo_sorvete')

# Exibindo gráfico de previsões vs valores reais
plt.figure(figsize=(8,6))
plt.scatter(X_test, y_test, color='blue', label='Vendas Reais')
plt.plot(X_test, y_pred, color='red', label='Previsões')
plt.title('Vendas de Sorvete x Temperatura')
plt.xlabel('Temperatura (°C)')
plt.ylabel('Vendas')
plt.legend()
plt.show()

# Finalizando o MLflow run
mlflow.end_run()









